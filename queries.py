create_schema = "CREATE SCHEMA IF NOT EXISTS catalyst"
create_tables = """
DROP VIEW IF EXISTS catalyst.ownership_structures_view;
DROP VIEW IF EXISTS catalyst.local_mf_ownership_totals_view_v3;
DROP VIEW IF EXISTS catalyst.local_mf_ownership_totals_view_v2;
DROP VIEW IF EXISTS catalyst.local_mf_ownerships_view_v2;
DROP VIEW IF EXISTS catalyst.local_mf_ownership_totals_view_v1;
DROP VIEW IF EXISTS catalyst.local_mf_ownerships_view_v1;

DROP TABLE IF EXISTS catalyst.ownership_structures_master;
DROP TABLE IF EXISTS catalyst.local_mf_ownerships_master;
DROP TABLE IF EXISTS catalyst.local_mf_ownership_totals_master;
DROP TABLE IF EXISTS catalyst.cash_levels_master;

CREATE TABLE catalyst.ownership_structures_master (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    date DATE NOT NULL,
    code VARCHAR NOT NULL,
    type SMALLINT DEFAULT 0,
    sec_num VARCHAR,
    price INT,
    local_is BIGINT,
    local_cp BIGINT,
    local_pf BIGINT,
    local_ib BIGINT,
    local_id BIGINT,
    local_mf BIGINT,
    local_sc BIGINT,
    local_fd BIGINT,
    local_ot BIGINT,
    foreign_is BIGINT,
    foreign_cp BIGINT,
    foreign_pf BIGINT,
    foreign_ib BIGINT,
    foreign_id BIGINT,
    foreign_mf BIGINT,
    foreign_sc BIGINT,
    foreign_fd BIGINT,
    foreign_ot BIGINT,
    total_shares BIGINT,
    mkt_cap BIGINT,
    PRIMARY KEY (id),
    CONSTRAINT os_date_code UNIQUE(date, code)
);

CREATE TABLE catalyst.local_mf_ownership_totals_master (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    date DATE NOT NULL,
    total_aum BIGINT,
    PRIMARY KEY (id),
    CONSTRAINT lmfot_date UNIQUE(date)
);

CREATE TABLE catalyst.local_mf_ownerships_master (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    total_id INT REFERENCES catalyst.local_mf_ownership_totals_master(id),
    date DATE NOT NULL,
    code VARCHAR NOT NULL,
    perc_own float8,
    mkt_cap BIGINT,
    PRIMARY KEY (id),
    CONSTRAINT lmfo_date_code UNIQUE(date, code)
);

CREATE TABLE catalyst.cash_levels_master (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    date DATE NOT NULL,
    all_equity BIGINT,
    all_aum BIGINT,
    all_cash BIGINT,
    all_cash_level float8,
    etf_index_aum BIGINT,
    active_equity BIGINT,
    active_aum BIGINT,
    active_cash BIGINT,
    active_cash_level float8,
    CONSTRAINT cl_date UNIQUE(date)
);
"""

create_views = """
DROP VIEW IF EXISTS catalyst.ownership_structures_view;
DROP VIEW IF EXISTS catalyst.local_mf_ownership_totals_view_v3;
DROP VIEW IF EXISTS catalyst.local_mf_ownership_totals_view_v2;
DROP VIEW IF EXISTS catalyst.local_mf_ownerships_view_v2;
DROP VIEW IF EXISTS catalyst.local_mf_ownership_totals_view_v1;
DROP VIEW IF EXISTS catalyst.local_mf_ownerships_view_v1;

CREATE VIEW catalyst.ownership_structures_view AS
    SELECT osm.*,
        osm.local_is + osm.local_cp + osm.local_pf + osm.local_ib +
        osm.local_id + osm.local_mf + osm.local_sc + osm.local_fd +
        osm.local_ot as local_total,
        osm.foreign_is + osm.foreign_cp + osm.foreign_pf + osm.foreign_ib +
        osm.foreign_id + osm.foreign_mf + osm.foreign_sc + osm.foreign_fd +
        osm.foreign_ot as foreign_total,
        local_mf + local_is + local_sc + local_pf as total_insti_local,
        foreign_mf + foreign_is + foreign_sc + foreign_pf as total_insti_foreign,
        CAST(CAST(local_is AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_local_is,
        CAST(CAST(local_cp AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_local_cp,
        CAST(CAST(local_pf AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_local_pf,
        CAST(CAST(local_ib AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_local_ib,
        CAST(CAST(local_id AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_local_id,
        CAST(CAST(local_mf AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_local_mf,
        CAST(CAST(local_sc AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_local_sc,
        CAST(CAST(local_fd AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_local_fd,
        CAST(CAST(local_ot AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_local_ot,
        CAST(CAST((osm.local_is + osm.local_cp + osm.local_pf + osm.local_ib +
        osm.local_id + osm.local_mf + osm.local_sc + osm.local_fd +
        osm.local_ot) AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_local_total,
        CAST(CAST(foreign_is AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_foreign_is,
        CAST(CAST(foreign_cp AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_foreign_cp,
        CAST(CAST(foreign_pf AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_foreign_pf,
        CAST(CAST(foreign_ib AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_foreign_ib,
        CAST(CAST(foreign_id AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_foreign_id,
        CAST(CAST(foreign_mf AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_foreign_mf,
        CAST(CAST(foreign_sc AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_foreign_sc,
        CAST(CAST(foreign_fd AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_foreign_fd,
        CAST(CAST(foreign_ot AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_foreign_ot,
        CAST(CAST((osm.foreign_is + osm.foreign_cp + osm.foreign_pf + osm.foreign_ib +
        osm.foreign_id + osm.foreign_mf + osm.foreign_sc + osm.foreign_fd +
        osm.foreign_ot) AS float(1)) / NULLIF(total_shares, 0) AS float(1)) as perc_foreign_total
    FROM catalyst.ownership_structures_master osm;

CREATE VIEW catalyst.local_mf_ownership_totals_view_v1 AS
    SELECT
        lmfot.*,
        sum(lmfo.mkt_cap) as total_mkt_cap
    FROM
        catalyst.local_mf_ownerships_master lmfo
    INNER JOIN
        catalyst.local_mf_ownership_totals_master lmfot ON lmfo.total_id = lmfot.id
    GROUP BY lmfot.id;

CREATE VIEW catalyst.local_mf_ownerships_view_v1 AS
    SELECT
        lmfo.*,
        lmfo.perc_own * lmfo.mkt_cap as exposure
    FROM
        catalyst.local_mf_ownerships_master lmfo;

CREATE VIEW catalyst.local_mf_ownerships_view_v2 AS
    SELECT
        lmfov.*,
        CAST(CAST(lmfov.exposure AS float(1)) / NULLIF(lmfotv.total_aum, 0) AS float(1)) as perc_portfolio,
        CAST(CAST(lmfov.mkt_cap AS float(1)) / NULLIF(lmfotv.total_mkt_cap, 0) AS float(1)) as idx_weight
    FROM
        catalyst.local_mf_ownership_totals_view_v1 lmfotv,
        catalyst.local_mf_ownerships_view_v1 lmfov
    WHERE
        lmfov.total_id = lmfotv.id;

CREATE VIEW catalyst.local_mf_ownership_totals_view_v2 AS
    SELECT
        lmfotv1.id,
        max(lmfotv1.date) AS date,
        max(lmfotv1.total_aum) AS total_aum,
        max(lmfotv1.total_mkt_cap) AS total_mkt_cap,
        sum(lmfov.exposure) AS total_exposure
    FROM
        catalyst.local_mf_ownerships_view_v2 lmfov
    LEFT OUTER JOIN
        catalyst.local_mf_ownership_totals_view_v1 lmfotv1 ON lmfotv1.id = lmfov.total_id
    GROUP BY lmfotv1.id;
        

CREATE VIEW catalyst.local_mf_ownership_totals_view_v3 AS
    SELECT
        lmfotv.id,
        lmfotv.date,
        lmfotv.total_aum,
        lmfotv.total_mkt_cap,
        lmfotv.total_exposure,
        CAST(CAST(lmfotv.total_exposure AS float(1)) / NULLIF(lmfotv.total_aum, 0) AS float(1)) as equity_level,
        CAST(1 - (CAST(lmfotv.total_exposure AS float(1)) / NULLIF(lmfotv.total_aum, 0)) AS float(1)) as cash_level
    FROM
        catalyst.local_mf_ownership_totals_view_v2 lmfotv;
"""

insert_os_rows = """
INSERT INTO catalyst.ownership_structures_master(
        date, code, type, sec_num, price,
        local_is, local_cp, local_pf, local_ib, local_id, local_mf, local_sc, local_fd, local_ot,
        foreign_is, foreign_cp, foreign_pf, foreign_ib, foreign_id, foreign_mf, foreign_sc, foreign_fd, foreign_ot,
        total_shares, mkt_cap
    )
    VALUES
        {}
    ON CONFLICT(date, code) DO UPDATE SET (
        date, code, type, sec_num, price,
        local_is, local_cp, local_pf, local_ib, local_id, local_mf, local_sc, local_fd, local_ot,
        foreign_is, foreign_cp, foreign_pf, foreign_ib, foreign_id, foreign_mf, foreign_sc, foreign_fd, foreign_ot,
        total_shares, mkt_cap
    ) = (
        EXCLUDED.date, EXCLUDED.code, EXCLUDED.type, EXCLUDED.sec_num, EXCLUDED.price,
        EXCLUDED.local_is, EXCLUDED.local_cp, EXCLUDED.local_pf, EXCLUDED.local_ib, EXCLUDED.local_id, EXCLUDED.local_mf, EXCLUDED.local_sc, EXCLUDED.local_fd, EXCLUDED.local_ot,
        EXCLUDED.foreign_is, EXCLUDED.foreign_cp, EXCLUDED.foreign_pf, EXCLUDED.foreign_ib, EXCLUDED.foreign_id, EXCLUDED.foreign_mf, EXCLUDED.foreign_sc, EXCLUDED.foreign_fd, EXCLUDED.foreign_ot,
        EXCLUDED.total_shares, EXCLUDED.mkt_cap
    );
"""

# Ids must be the same with the insert_os_rows function above
os_map = [
    'Date', 'Code', 'Type', 'Sec. Num', 'Price',
    'Local IS', 'Local CP', 'Local PF', 'Local IB', 'Local ID', 'Local MF', 'Local SC', 'Local FD', 'Local OT',
    'Foreign IS', 'Foreign CP', 'Foreign PF', 'Foreign IB', 'Foreign ID', 'Foreign MF', 'Foreign SC', 'Foreign FD', 'Foreign OT',
    'To No of Shares', 'Market Cap'
]

insert_lmfo_rows = """
INSERT INTO catalyst.local_mf_ownerships_master (
        date, total_id, code, perc_own, mkt_cap
    )
    VALUES
        {}
    ON CONFLICT(date, code) DO UPDATE SET
    (date, total_id, code, perc_own, mkt_cap) =
    (EXCLUDED.date, EXCLUDED.total_id, EXCLUDED.code, EXCLUDED.perc_own, EXCLUDED.mkt_cap);
"""

insert_lmfot_row = """
INSERT INTO catalyst.local_mf_ownership_totals_master (
        date, total_aum
    )
    VALUES
        {}
    ON CONFLICT(date) DO UPDATE SET
    (date, total_aum) = (EXCLUDED.date, EXCLUDED.total_aum)
    RETURNING id;
"""

insert_cl_rows = """
INSERT INTO catalyst.cash_levels_master (
        date, all_equity, all_aum, all_cash, all_cash_level, etf_index_aum,
        active_equity, active_aum, active_cash, active_cash_level
    )
    VALUES
        {}
    ON CONFLICT(date) DO UPDATE SET (
        date, all_equity, all_aum, all_cash, all_cash_level, etf_index_aum,
        active_equity, active_aum, active_cash, active_cash_level
    ) = (
        EXCLUDED.date, EXCLUDED.all_equity, EXCLUDED.all_aum, EXCLUDED.all_cash, EXCLUDED.all_cash_level, EXCLUDED.etf_index_aum,
        EXCLUDED.active_equity, EXCLUDED.active_aum, EXCLUDED.active_cash, EXCLUDED.active_cash_level
    );
"""
